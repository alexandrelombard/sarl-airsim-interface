/** 
 * 
 */
package io.sarl.airsim

import io.sarl.airsim.simulation.behaviors.MultirotorInfluenceEmitter
import io.sarl.airsim.simulation.behaviors.MultirotorPerceptionRetriever
import io.sarl.airsim.simulation.behaviors.SimulationController
import io.sarl.airsim.simulation.capacities.AgentBodyAffectationCapacity
import io.sarl.airsim.simulation.framework.capacities.ApplyInfluenceCapacity
import io.sarl.airsim.simulation.capacities.MultirotorSimulationControlCapacity
import io.sarl.airsim.simulation.capacities.MultirotorSimulationPerceptionCapacity
import io.sarl.airsim.simulation.framework.capacities.PropagatePerceptionsCapacity
import io.sarl.airsim.simulation.capacities.SimulationControlCapacity
import io.sarl.airsim.simulation.capacities.SimulationPerceptionCapacity
import io.sarl.airsim.simulation.framework.events.StartSimulation
import io.sarl.airsim.simulation.framework.skills.influence.BatchedInfluenceApplication
import io.sarl.airsim.simulation.skills.airsim.AirSimMultirotorControl
import io.sarl.airsim.simulation.skills.airsim.AirSimMultirotorSimulationPerception
import io.sarl.airsim.simulation.skills.airsim.AirSimSimulationControl
import io.sarl.airsim.simulation.skills.airsim.AirSimSimulationPerception
import io.sarl.core.Behaviors
import io.sarl.core.DefaultContextInteractions
import io.sarl.core.Initialize
import java.util.Collections
import io.sarl.airsim.simulation.framework.skills.FcfsFixedSizePoolAgentBodyAffectation
import io.sarl.airsim.simulation.framework.skills.BatchedPerceptionsPropagation

/**
 * Agent in charge of controlling the simulation, transmitting the influences and
 * dispatching the perceptions .
 * This agent has basically 3 main roles and capacities:
 * - Managing the propagation of perceptions and influences
 * - Managing the simulation schedule
 * - Managing the affectation of bodies to agents
 * @author Alexandre Lombard
 * 
 */
agent SimulationControllerAgent {
	
	uses DefaultContextInteractions, Behaviors

	uses AgentBodyAffectationCapacity

	val pool = (0 .. 2).map["S" + it].toList
	
	on Initialize {
		// Install the simulation control capacities
		setSkill(new AirSimSimulationControl, SimulationControlCapacity)
		setSkill(new AirSimMultirotorControl, MultirotorSimulationControlCapacity)
		setSkill(new AirSimSimulationPerception, SimulationPerceptionCapacity)
 		setSkill(new AirSimMultirotorSimulationPerception, MultirotorSimulationPerceptionCapacity)
//		setSkill(new MockSimulationControl, SimulationControlCapacity)
//		setSkill(new MockMultirotorControl, MultirotorSimulationControlCapacity)
//		setSkill(new MockSimulationPerception, SimulationPerceptionCapacity)
//		setSkill(new MockMultirotorSimulationPerception, MultirotorSimulationPerceptionCapacity)
		
		// region Simulation management: defining skills and behaviors
		setSkill(new FcfsFixedSizePoolAgentBodyAffectation([|
			val pool = pool
			Collections.shuffle(pool)
			return pool
		].apply), AgentBodyAffectationCapacity)
		
		setSkill(new BatchedInfluenceApplication(
			[t, i|i.size >= affectedBodiesCount],
			2,
			false
		), ApplyInfluenceCapacity)
		
		setSkill(new BatchedPerceptionsPropagation(), PropagatePerceptionsCapacity)
		
		registerBehavior(new MultirotorInfluenceEmitter(this))
		registerBehavior(new MultirotorPerceptionRetriever(this))
		registerBehavior(new SimulationController(this))
		// endregion
		
		emit(new StartSimulation)
	}
}
