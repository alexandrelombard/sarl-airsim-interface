/** 
 * 
 */
package io.sarl.airsim.simulation.allocation

import io.sarl.lang.core.Address
import java.util.Collection
import java.util.Queue
import java.util.concurrent.ConcurrentHashMap
import org.eclipse.xtext.xbase.lib.Procedures.Procedure2
import java.util.Collections
import java.util.Map
import io.sarl.airsim.simulation.capacities.AgentBodyAffectationCapacity

/** 
 * Represents an allocation strategy proposing a fixed pool of bodies.
 * The attribution of the body follows the policy "first come, first served".
 * The body will be attributed in the order of the iteration on the elements of the pool.
 * @author Alexandre Lombard
 * 
 */
skill FcfsFixedSizePoolAgentBodyAffectation implements AgentBodyAffectationCapacity {
	
	val pool: Queue<String> = newLinkedList
	
	val affectations: ConcurrentHashMap<Address, String> = new ConcurrentHashMap
	
	/**
	 * Builds this strategy with the given pool.
	 * Note: the pool will be internally copied to prevent it from being changed outside.
	 */
	new (pool: Collection<String>) {
		for(body : pool) {
			this.pool.add(body)
		}
	}
	
	def affectedBodiesCount : Integer {
		return this.affectations.size
	}
	
	def affectedBodies : Map<Address, String> {
		return Collections.unmodifiableMap(this.affectations)
	}
	
	def affectOrGetBody(address : Address, onAffectation : Procedure2<Address, String>) : String {
		var name : String
		if (!this.affectations.containsKey(address)) {
			synchronized (this.pool) {
				if (this.pool.isEmpty) {
					return null
				}

				name = this.pool.poll
			}

			this.affectations.put(address, name)
			
			onAffectation.apply(address, name)
		} else {
			name = this.affectations.get(address)
		}

		return name
	}

}
